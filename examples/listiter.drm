class List {

    head = $
    last = $
    length = 0

    iter_count = 0

    class Node {
        value = $
        next = $
        func init(value)
    }

    func push(element){
        node = Node(element)
        length = length + 1
        if head is $ {
            head = node
            last = head
            return node.value
        }
        last.next = node
        last = node
        return node.value
    }

    func _get(var node, var index){
        if index is 0 -> return node.value
        return _get(node.next, index - 1)
    }

    func next(first){
        if first is true -> iter_count = -1
        iter_count = iter_count + 1
    }

     func has_next() -> return iter_count is not length

     func get_next() -> return get(iter_count)

     func get(index) -> return _get(head, index)

    func get_iter(){
        class Iter {
            count = 0

            func has_next() -> return count is not length

            func get_next() -> return get(count)

            func get(index) -> return _get(head, index)

            func next(first){
                if first is true -> count = -1
                count = count + 1
            }
        }
        return Iter()
    }

    func add(other){
        #the new list should be a copy of this...unfortunately, you cannot copy "this" atm
        list = this
        list.last.next = other.head
        return list
    }

}

animals = List()
animals.push("cat")
animals.push("dog")
animals.push("bird")


house = if true {
    export if true {
         a = 32
    }
}

print(house.a)

#for animal1 in animals {
#    if true{
#        for animal in animals {
#            print(animal1, "thinks", animal, "is cool")
#        }
#    }

#}


#for animal1 in animals.get_iter() {
#    if true{
#        for animal in animals.get_iter() {
#            if animal is not animal1{
#                print(animal1, "thinks", animal, "is cool")
#            }
#        }
#        print("---------------")
#    }
#}


#print(animals.get(1))

